{"ast":null,"code":"import { ERROR_MESSAGES } from '../../../server/utils/constants';\nimport config from '../config';\n\nclass Session {\n  constructor() {\n    this.user = null;\n    this.profilePicture = null;\n    this.initialized = false;\n    this.websocketConnected = false;\n    this.ws = null;\n  }\n\n  init() {\n    if (this.initialized) {\n      return null;\n    }\n\n    const user = this.getUser();\n\n    if (user && this.user.access_token) {\n      this.connect();\n      this.initialized = true;\n    }\n  }\n\n  reset() {\n    this.user = null;\n    this.profilePicture = null;\n    this.initialized = false;\n    localStorage.clear();\n  }\n\n  isConnected() {\n    return this.user !== null;\n  }\n\n  connect() {\n    console.log('Trying to connect...');\n    const websocketUrl = config.webSocketUrl || window.location.origin.replace('http', 'ws');\n    this.ws = new WebSocket(websocketUrl);\n\n    this.ws.onopen = () => {\n      console.log('Connected!');\n      this.websocketConnected = true;\n      this.ws.send(JSON.stringify({\n        type: 'authenticate.request',\n        payload: {\n          accessToken: this.user.access_token\n        }\n      }));\n\n      this.ws.onmessage = e => {\n        const {\n          data\n        } = e;\n        const {\n          type,\n          payload\n        } = JSON.parse(data);\n      };\n    };\n\n    this.ws.onerror = e => {\n      console.log('Error', e);\n    };\n\n    this.ws.onclose = e => {\n      console.log(e);\n      console.log('disconnected');\n      this.websocketConnected = false;\n\n      if (e.reason === ERROR_MESSAGES.INVALID_ACCESS_TOKEN) {\n        delete this.user.access_token;\n        this.saveUser(this.user);\n      } else {\n        setTimeout(() => {\n          this.connect();\n        }, 1000);\n      }\n    };\n  }\n\n  getUser() {\n    if (this.user) {\n      return this.user;\n    }\n\n    const data = localStorage.getItem('user');\n\n    if (data) {\n      this.user = JSON.parse(data);\n    }\n\n    return this.user;\n  }\n\n  getRefreshToken() {\n    if (this.user) {\n      return this.user.refresh_token;\n    }\n\n    return null;\n  }\n\n  getAccessToken() {\n    if (this.user) {\n      return this.user.access_token;\n    }\n\n    return null;\n  }\n\n  setAccessToken(accessToken) {\n    const newUser = Object.assign({}, this.user, {\n      access_token: accessToken\n    });\n    this.saveUser(newUser);\n  }\n\n  getProfilePicture() {\n    if (this.profilePicture) {\n      return this.profilePicture;\n    }\n\n    const data = localStorage.getItem('profile_picture');\n\n    if (data) {\n      this.profilePicture = data;\n    }\n\n    return this.profilePicture;\n  }\n\n  saveUser(user) {\n    const mergedUser = Object.assign({}, this.user, user);\n    this.user = mergedUser;\n    localStorage.setItem('user', JSON.stringify(mergedUser));\n  }\n\n  saveProfilePicture(profilePicture) {\n    this.profilePicture = profilePicture;\n    localStorage.setItem('profile_picture', profilePicture);\n  }\n\n}\n\nexport { Session };","map":{"version":3,"sources":["/Users/jeufore/Documents/charlinfo/front/src/actions/Session.js"],"names":["ERROR_MESSAGES","config","Session","constructor","user","profilePicture","initialized","websocketConnected","ws","init","getUser","access_token","connect","reset","localStorage","clear","isConnected","console","log","websocketUrl","webSocketUrl","window","location","origin","replace","WebSocket","onopen","send","JSON","stringify","type","payload","accessToken","onmessage","e","data","parse","onerror","onclose","reason","INVALID_ACCESS_TOKEN","saveUser","setTimeout","getItem","getRefreshToken","refresh_token","getAccessToken","setAccessToken","newUser","Object","assign","getProfilePicture","mergedUser","setItem","saveProfilePicture"],"mappings":"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","sourcesContent":["import { ERROR_MESSAGES } from '../../../server/utils/constants';\nimport config from '../config';\n\nclass Session {\n  constructor() {\n    this.user = null;\n    this.profilePicture = null;\n    this.initialized = false;\n    this.websocketConnected = false;\n    this.ws = null;\n  }\n\n  init() {\n    if (this.initialized) {\n      return null;\n    }\n    const user = this.getUser();\n    if (user && this.user.access_token) {\n      this.connect();\n      this.initialized = true;\n    }\n  }\n\n  reset() {\n    this.user = null;\n    this.profilePicture = null;\n    this.initialized = false;\n    localStorage.clear();\n  }\n\n  isConnected() {\n    return this.user !== null;\n  }\n\n  connect() {\n    console.log('Trying to connect...');\n    const websocketUrl = config.webSocketUrl || window.location.origin.replace('http', 'ws');\n    this.ws = new WebSocket(websocketUrl);\n    this.ws.onopen = () => {\n      console.log('Connected!');\n      this.websocketConnected = true;\n      this.ws.send(\n        JSON.stringify({\n          type: 'authenticate.request',\n          payload: {\n            accessToken: this.user.access_token\n          }\n        })\n      );\n      this.ws.onmessage = e => {\n        const { data } = e;\n        const { type, payload } = JSON.parse(data);\n      };\n    };\n    this.ws.onerror = e => {\n      console.log('Error', e);\n    };\n    this.ws.onclose = e => {\n      console.log(e);\n      console.log('disconnected');\n      this.websocketConnected = false;\n      if (e.reason === ERROR_MESSAGES.INVALID_ACCESS_TOKEN) {\n        delete this.user.access_token;\n        this.saveUser(this.user);\n      } else {\n        setTimeout(() => {\n          this.connect();\n        }, 1000);\n      }\n    };\n  }\n\n  getUser() {\n    if (this.user) {\n      return this.user;\n    }\n    const data = localStorage.getItem('user');\n    if (data) {\n      this.user = JSON.parse(data);\n    }\n    return this.user;\n  }\n\n  getRefreshToken() {\n    if (this.user) {\n      return this.user.refresh_token;\n    }\n    return null;\n  }\n\n  getAccessToken() {\n    if (this.user) {\n      return this.user.access_token;\n    }\n    return null;\n  }\n\n  setAccessToken(accessToken) {\n    const newUser = Object.assign({}, this.user, {\n      access_token: accessToken\n    });\n    this.saveUser(newUser);\n  }\n\n  getProfilePicture() {\n    if (this.profilePicture) {\n      return this.profilePicture;\n    }\n    const data = localStorage.getItem('profile_picture');\n    if (data) {\n      this.profilePicture = data;\n    }\n\n    return this.profilePicture;\n  }\n\n  saveUser(user) {\n    const mergedUser = Object.assign({}, this.user, user);\n    this.user = mergedUser;\n    localStorage.setItem('user', JSON.stringify(mergedUser));\n  }\n\n  saveProfilePicture(profilePicture) {\n    this.profilePicture = profilePicture;\n    localStorage.setItem('profile_picture', profilePicture);\n  }\n}\n\nexport { Session };"]},"metadata":{},"sourceType":"module"}