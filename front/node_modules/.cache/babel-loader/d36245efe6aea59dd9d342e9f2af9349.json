{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nconst MAX_RETRY = 3;\nexport class httpRequest {\n  constructor(session) {\n    this.session = session;\n    this.localApiUrl = config.localApiUrl || window.location.origin;\n  }\n\n  getAxiosHeaders() {\n    const headers = {};\n\n    if (this.session.getAccessToken()) {\n      headers.authorization = `Bearer ${this.session.getAccessToken()}`;\n    }\n\n    return headers;\n  }\n\n  async refreshAccessToken() {\n    const {\n      data\n    } = await axios({\n      baseURL: this.localApiUrl,\n      url: '/api/v1/access_token',\n      method: 'post',\n      data: {\n        refresh_token: this.session.getRefreshToken()\n      }\n    });\n    this.session.setAccessToken(data.access_token);\n  }\n\n  async executeQuery(method, url, query, body, retryCount = 0) {\n    if (retryCount > MAX_RETRY) {\n      this.session.reset();\n      throw new Error('MAX_RETRY_EXCEEDED');\n    }\n\n    try {\n      const {\n        data\n      } = await axios({\n        baseURL: this.localApiUrl,\n        url,\n        method,\n        params: query,\n        data: body,\n        headers: this.getAxiosHeaders()\n      });\n      console.log(data);\n      return data;\n    } catch (e) {\n      if (e.response && e.response.status === 401) {\n        await this.refreshAccessToken();\n        return this.executeQuery(method, url, query, body, retryCount + 1);\n      }\n\n      throw e;\n    }\n  }\n\n  async get(url, query) {\n    return this.executeQuery('get', url, query);\n  }\n\n  async post(url, body) {\n    return this.executeQuery('post', url, {}, body);\n  }\n\n  async patch(url, body) {\n    return this.executeQuery('patch', url, {}, body);\n  }\n\n  async delete(url, body) {\n    return this.executeQuery('delete', url);\n  }\n\n}","map":{"version":3,"sources":["/Users/jeufore/Documents/charlinfo/front/src/actions/httpRequest.js"],"names":["axios","config","MAX_RETRY","httpRequest","constructor","session","localApiUrl","window","location","origin","getAxiosHeaders","headers","getAccessToken","authorization","refreshAccessToken","data","baseURL","url","method","refresh_token","getRefreshToken","setAccessToken","access_token","executeQuery","query","body","retryCount","reset","Error","params","console","log","e","response","status","get","post","patch","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport config from '../config';\n\nconst MAX_RETRY = 3;\n\nexport class httpRequest {\n  constructor(session) {\n    this.session = session;\n    this.localApiUrl = config.localApiUrl || window.location.origin;\n  }\n\n  getAxiosHeaders() {\n    const headers = {};\n    if (this.session.getAccessToken()) {\n      headers.authorization = `Bearer ${this.session.getAccessToken()}`;\n    }\n    return headers;\n  }\n\n  async refreshAccessToken() {\n    const { data } = await axios({\n      baseURL: this.localApiUrl,\n      url: '/api/v1/access_token',\n      method: 'post',\n      data: {\n        refresh_token: this.session.getRefreshToken()\n      }\n    });\n    this.session.setAccessToken(data.access_token);\n  }\n\n  async executeQuery(method, url, query, body, retryCount = 0) {\n    if (retryCount > MAX_RETRY) {\n      this.session.reset();\n      throw new Error('MAX_RETRY_EXCEEDED');\n    }\n    try {\n      const { data } = await axios({\n        baseURL: this.localApiUrl,\n        url,\n        method,\n        params: query,\n        data: body,\n        headers: this.getAxiosHeaders()\n      });\n      console.log(data)\n      return data;\n    } catch (e) {\n      if (e.response && e.response.status === 401) {\n        await this.refreshAccessToken();\n        return this.executeQuery(method, url, query, body, retryCount + 1);\n      }\n      throw e;\n    }\n  }\n\n  async get(url, query) {\n    return this.executeQuery('get', url, query);\n  }\n\n  async post(url, body) {\n    return this.executeQuery('post', url, {}, body);\n  }\n\n  async patch(url, body) {\n    return this.executeQuery('patch', url, {}, body);\n  }\n\n  async delete(url, body) {\n    return this.executeQuery('delete', url);\n  }\n}"]},"metadata":{},"sourceType":"module"}